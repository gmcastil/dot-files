#!/bin/bash

#
# Create a prompt with the following characteristics
#
#   {timestamp} [?] (versioning) username@hostname:/absolute/path/to/pwd
#   $

# shellcheck disable=SC2034

function __color_enabled () {
  # Returns true if we're on a terminal that supports color
  if [[ -t 1 ]]; then
    local -i ncolors
    ncolors=$(tput colors 2>/dev/null)
    if [[ "${?}" == 0 && "${ncolors}" -gt 2 ]]; then
      return 0
    fi
  fi
  return 1
}

function prompt_command () {

  # Save last return value since following commands will trample it
  local last_retval=$?

  local pre_git_PS1
  local post_git_PS1

  local hist
  local timestamp
  local userhost
  local unsym_pwd

  local fmt_hist
  local fmt_last_retval
  local fmt_timestamp
  local fmt_userhost
  local fmt_unsym_pwd

  # 8-bit ANSI colors for portability - note that the color codes are wrapped
  # so that bash calculates line lengths correctly
  local black='\[\e[0;30m\]'
  local red='\[\e[0;31m\]'
  local green='\[\e[0;32m\]'
  local yellow='\[\e[0;33m\]'
  local blue='\[\e[0;34m\]'
  local magenta='\[\e[0;35m\]'
  local cyan='\[\e[0;36m\]'
  local white='\[\e[0;37m\]'

  local bright_black='\[\e[1;30m\]'
  local bright_red='\[\e[1;31m\]'
  local bright_green='\[\e[1;32m\]'
  local bright_yellow='\[\e[1;33m\]'
  local bright_blue='\[\e[1;34m\]'
  local bright_magenta='\[\e[1;35m\]'
  local bright_cyan='\[\e[1;36m\]'
  local bright_white='\[\e[1;37m\]'

  local normal='\[\e[0m\]'

  local sep_color="${bright_black}"

  hist="\!"
  timestamp="\D{%Y-%m-%d %H:%M:%S}"
  userhost="\u@\h"
  unsym_pwd=$(builtin pwd -P)

  if __color_enabled; then
    GIT_PS1_SHOWCOLORHINTS=1
    export GIT_PS1_SHOWCOLORHINTS

    if [[ "${last_retval}" == 0 ]]; then
      last_retval="${white}${last_retval}${normal}"
    else
      last_retval="${red}${last_retval}${normal}"
    fi

    fmt_hist="${sep_color}[${yellow}${hist}${sep_color}]${normal}"
    fmt_last_retval="${sep_color}[${last_retval}${sep_color}]${normal}"
    fmt_timestamp="${sep_color}{${magenta}${timestamp}${sep_color}}${normal}"
    fmt_userhost="${cyan}\u${sep_color}@${cyan}\h${normal}"
    fmt_unsym_pwd="${unsym_pwd}"

    pre_git_PS1="${fmt_hist} ${fmt_timestamp} ${fmt_last_retval} "
    post_git_PS1="${fmt_userhost}${sep_color}:${normal}${fmt_unsym_pwd}${normal}\r\n\$ "

  else
    unset GIT_PS1_SHOWCOLORHINTS

    fmt_hist=["${hist}"]
    fmt_last_retval=["${last_retval}"]
    fmt_timestamp="{${timestamp}}"
    fmt_userhost="${userhost}"
    fmt_unsym_pwd="${unsym_pwd}"

    pre_git_PS1="${fmt_hist} ${fmt_timestamp} ${fmt_last_retval} "
    post_git_PS1="${fmt_userhost}:${fmt_unsym_pwd}\r\n\$ "

  fi

  # Composite PS1 expression to use
  # __git_ps1 "${pre_git_PS1}" "${post_git_PS1}" '(%s) '
  __git_ps1 "${pre_git_PS1}" "${post_git_PS1}" "${sep_color}(%s${sep_color})${normal} "

  GIT_PS1_SHOWDIRTYSTATE=1
  GIT_PS1_SHOWSTASHSTATE=0
  GIT_PS1_SHOWUNTRACKEDFILES=0
  GIT_PS1_SHOWUPSTREAM="verbose"
  GIT_PS1_STATESEPARATOR=''
  GIT_PS1_DESCRIBE_STYLE="describe"
  GIT_PS1_HIDE_IF_PWD_IGNORED=1

  export GIT_PS1_SHOWDIRTYSTATE
  export GIT_PS1_SHOWSTASHSTATE
  export GIT_PS1_SHOWUNTRACKEDFILES
  export GIT_PS1_SHOWUPSTREAM
  export GIT_PS1_STATESEPARATOR
  export GIT_PS1_DESCRIBE_STYLE
  export GIT_PS1_HIDE_IF_PWD_IGNORED

}

# If a Git prompt script is present, then we get a `__git_ps1` definition from
# there, otherwise we make an empty one
if [[ -f "${HOME}/.git-prompt" ]]; then
  # shellcheck disable=SC1090
  source "${HOME}/.git-prompt"
fi

export PROMPT_COMMAND=prompt_command

