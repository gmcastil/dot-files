#!/usr/bin/env bash

# shellcheck disable=SC2034

IFS=$' \n\t'

# Set the prompt to include basic version control information and directory
# navigation information.  In general, to change the default color and format,
# edit the corresponding strings (e.g., $cmd_string) rather than adding onto
# the definition for $PS1 in the prompt_command() function.  Naturally, this
# also assumes that the appropriate executables are in $PATH.  To use this at
# startup, put something similar to the following in your .bashrc:
#
# if [[ -f ~/.prompt ]]; then
#     source ~/.prompt
# else
#     export PS1='\u@\h \$ '
# fi
#

# Username     - green
# Hostname     - green
# Datetime     - purple
# Error status - green or red
# VCS status   - green, yellow or red depending on status
# Pathname     - cyan
#
# username@hostname {datetime} [?] (VCS) /absolute/path/to/pwd
# $

# These are not all the combinations available, but it should still be
# enough to support the desired combinations
black='\[\033[0;30m\]'
red='\[\033[0;31m\]'
green='\[\033[0;32m\]'
yellow='\[\033[0;33m\]'
blue='\[\033[0;34m\]'
purple='\[\033[0;35m\]'
cyan='\[\033[0;36m\]'
light_gray='\[\033[0;37m\]'

dark_gray='\[\033[1;30m\]'  # solarized dark background
light_red='\[\033[1;31m\]'
light_green='\[\033[1;32m\]'  # dark grey
light_yellow='\[\033[1;33m\]'  # medium grey
light_blue='\[\033[1;34m\]'  # brighter grey
light_purple='\[\033[1;35m\]'
light_cyan='\[\033[1;36m\]'
white='\[\033[1;37m\]'

no_color='\[\033[0m\]'

# Define the color for things like @, [, ( in one place
sep_color=$light_green

function prompt_command() {

    # Determine color encoding for the command status - this has to be the
    # first line in the function to catch the command status
    local cmd_status="$?"

    local full_pwd
    local cmd_color
    full_pwd="$(pwd -P)"
    cmd_color=""
    if [ "$cmd_status" != 0 ]; then
        cmd_color="$light_red"
    else
        cmd_color="$cyan"
    fi

    local cmd_string
    cmd_string="$sep_color[$cmd_color$cmd_status$sep_color]"

    # if a git repo, set the string for color, branch name, and status
    local vcs_string
    if ! [[ "$(git status -unormal 2>&1)" =~ Not\ a\ git\ repo ]]; then
        vcs_string="$(_git_prompt)"
    elif ! [[ "$(svn info "$full_pwd" 2>&1)" =~ not\ a\ working\ copy ]]; then
        vcs_string="$(_svn_prompt)"
    else
        vcs_string=""
    fi

    local host_string
    local path_string
    local time_string
    local stem_string

    # Determine color and formatting for the hostname and user
    host_string="$cyan\\u$sep_color@$cyan\\h"

    # Resolve all symbolic lengths, regardless of how deep it goes
    path_string="$light_cyan$full_pwd"

    # Set the time string
    time_string="$sep_color{$purple\\D{%F %T}$sep_color}"

    # Embed the linefeed here
    stem_string="\\n$sep_color\\$ $no_color"

    PS1="$host_string $time_string $cmd_string $vcs_string $path_string $stem_string"
    export PS1
}

function _git_prompt() {

    # Returns a formatted and colorized string containing branch name and status
    local git_status
    git_status="$(git status -unormal 2>&1)"
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
	local git_color="$green"
    elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
	local git_color="$red"
    else
	local git_color="$yellow"
    fi
    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
	branch=${BASH_REMATCH[1]}
    else
	branch="($(git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD))"
    fi
    echo -n "$sep_color($git_color$branch$sep_color)"
}

function _svn_prompt() {

    # Returns a formatted and colorized string containing version and status
    local svn_color
    local svn_status
    local svn_string
    svn_status="$(svn status -q | grep ^M)"
    svn_string="$(svnversion)"
    if [[ -z "$svn_status" ]]; then
        svn_color=$green
    else
        svn_color=$yellow
    fi
    echo -n "$sep_color($svn_color$svn_string$sep_color)"
}

export PROMPT_COMMAND=prompt_command
